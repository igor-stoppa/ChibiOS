<?xml version="1.0" encoding="UTF-8"?>
<SPC5-Config version="1.0.0">
  <application name="Test Suite" version="1.0.0" standalone="true" locked="false">
    <description>Test specification for the NASA OSAL ChibiOS extension.</description>
    <component id="org.chibios.spc5.components.platform.generic">
      <component id="org.chibios.spc5.components.chibios_unitary_tests_engine" />
    </component>
    <instances>
      <instance locked="false" id="org.chibios.spc5.components.platform.generic" />
      <instance locked="false" id="org.chibios.spc5.components.chibios_unitary_tests_engine">
        <description>
          <introduction>
            <value>Test suite for NASA OSAL implementation over ChibiOS/RT. The purpose of this suite is to perform unit tests on the OSAL module and to converge to 100% code coverage through successive improvements.</value>
          </introduction>
        </description>
        <global_data_and_code>
          <global_definitions>
            <value><![CDATA[#define TEST_SUITE_NAME                     "NASA OSAL over ChibiOS/RT Test Suite"

#define TASKS_BASE_PRIORITY                 200
#define TASKS_STACK_SIZE                    256

extern THD_WORKING_AREA(wa_test1, TASKS_STACK_SIZE);
extern THD_WORKING_AREA(wa_test2, TASKS_STACK_SIZE);
extern THD_WORKING_AREA(wa_test3, TASKS_STACK_SIZE);
extern THD_WORKING_AREA(wa_test4, TASKS_STACK_SIZE);]]></value>
          </global_definitions>
          <global_code>
            <value><![CDATA[THD_WORKING_AREA(wa_test1, TASKS_STACK_SIZE);
THD_WORKING_AREA(wa_test2, TASKS_STACK_SIZE);
THD_WORKING_AREA(wa_test3, TASKS_STACK_SIZE);
THD_WORKING_AREA(wa_test4, TASKS_STACK_SIZE);]]></value>
          </global_code>
        </global_data_and_code>
        <sequences>
          <sequence>
            <type index="0">
              <value>Internal Tests</value>
            </type>
            <brief>
              <value>Threads Functionality</value>
            </brief>
            <description>
              <value>This sequence tests the NASA OSAL over ChibiOS/RT functionalities related to threading.</value>
            </description>
            <shared_code>
              <value><![CDATA[#include "osapi.h"

static void test_thread1(void) {

  test_emit_token('A');
}

static void test_thread2(void) {

  test_emit_token('B');
}

static void test_thread3(void) {

  test_emit_token('C');
}

static void test_thread4(void) {

  test_emit_token('D');
}

static void delete_handler(void) {

  test_emit_token('C');
}

static void test_thread_delete(void) {

  test_emit_token('A');
  (void) OS_TaskInstallDeleteHandler(delete_handler);
  while (!OS_TaskDeleteCheck()) {
    (void) OS_TaskDelay(1);
  }
  test_emit_token('B');
}]]></value>
            </shared_code>
            <cases>
              <case>
                <brief>
                  <value>OS_TaskCreate() errors</value>
                </brief>
                <description>
                  <value>Parameters checking in OS_TaskCreate() is tested.</value>
                </description>
                <condition>
                  <value />
                </condition>
                <various_code>
                  <setup_code>
                    <value />
                  </setup_code>
                  <teardown_code>
                    <value />
                  </teardown_code>
                  <local_variables>
                    <value />
                  </local_variables>
                </various_code>
                <steps>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with task_id set to NULL, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;

err = OS_TaskCreate(NULL,                   /* Error.*/
                    "failing thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_INVALID_POINTER, "NULL not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with task_name set to NULL, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    NULL,                   /* Error.*/
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_INVALID_POINTER, "NULL not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with stack_pointer set to NULL, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    "failing thread",
                    test_thread1,
                    (uint32 *)NULL,         /* Error.*/
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_INVALID_POINTER, "NULL not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with a very long task name, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    "this is a very very long task name", /* Error.*/
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_ERR_NAME_TOO_LONG, "name limit not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with priority below and above allowed range, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    "failing thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    0,                      /* Error.*/
                    0);
test_assert(err == OS_ERR_INVALID_PRIORITY, "priority error not detected");
test_assert_sequence("", "task executed");

err = OS_TaskCreate(&tid,
                   "failing thread",
                   test_thread1,
                   (uint32 *)wa_test1,
                   sizeof wa_test1,
                   256,                     /* Error.*/
                   0);
test_assert(err == OS_ERR_INVALID_PRIORITY, "priority error not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked with a stack size below minimum, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    "failing thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    16,                     /* Error.*/
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_INVALID_INT_NUM, "stack insufficient size not detected");
test_assert_sequence("", "task executed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>OS_TaskCreate() is invoked twice with duplicated name and then duplicated stack, an error is expected in both cases.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid;

err = OS_TaskCreate(&tid,
                    "running thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_SUCCESS, "task creation failed");

err = OS_TaskCreate(&tid,
                    "running thread",
                    test_thread2,
                    (uint32 *)wa_test2,
                    sizeof wa_test2,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_ERR_NAME_TAKEN, "name conflict not detected");

err = OS_TaskCreate(&tid,
                    "conflicting thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_ERR_NO_FREE_IDS, "stack conflict not detected");

OS_TaskDelay(5);
test_assert_sequence("A", "task not executed");

err = OS_TaskCreate(&tid,
                    "running thread",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_SUCCESS, "task creation failed");

OS_TaskDelay(5);
test_assert_sequence("A", "task not executed");]]></value>
                    </code>
                  </step>
                </steps>
              </case>
              <case>
                <brief>
                  <value>OS_TaskCreate() priority ordering</value>
                </brief>
                <description>
                  <value>Four tasks are created at different priorities and in different order. The execution order must happen in order of priority regardless the creation order.</value>
                </description>
                <condition>
                  <value />
                </condition>
                <various_code>
                  <setup_code>
                    <value />
                  </setup_code>
                  <teardown_code>
                    <value />
                  </teardown_code>
                  <local_variables>
                    <value />
                  </local_variables>
                </various_code>
                <steps>
                  <step>
                    <description>
                      <value>Four tasks are created in priority order from low to high.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid1, tid2, tid3, tid4;

err = OS_TaskCreate(&tid4,
                    "running thread 4",
                    test_thread4,
                    (uint32 *)wa_test4,
                    sizeof wa_test4,
                    TASKS_BASE_PRIORITY - 0,
                    0);
test_assert(err == OS_SUCCESS, "task 4 creation failed");

err = OS_TaskCreate(&tid3,
                    "running thread 3",
                    test_thread3,
                    (uint32 *)wa_test3,
                    sizeof wa_test3,
                    TASKS_BASE_PRIORITY - 1,
                    0);
test_assert(err == OS_SUCCESS, "task 3 creation failed");

err = OS_TaskCreate(&tid2,
                    "running thread 2",
                    test_thread2,
                    (uint32 *)wa_test2,
                    sizeof wa_test2,
                    TASKS_BASE_PRIORITY - 2,
                    0);
test_assert(err == OS_SUCCESS, "task 2 creation failed");

err = OS_TaskCreate(&tid1,
                    "running thread 1",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY - 3,
                    0);
test_assert(err == OS_SUCCESS, "task 1 creation failed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Tasks are made runnable atomically and their execution order tested.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[OS_TaskDelay(5);
test_assert_sequence("ABCD", "task order violation");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Four tasks are created in priority order from high to low.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid1, tid2, tid3, tid4;

err = OS_TaskCreate(&tid1,
                    "running thread 1",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY - 3,
                    0);
test_assert(err == OS_SUCCESS, "task 1 creation failed");

err = OS_TaskCreate(&tid2,
                    "running thread 2",
                    test_thread2,
                    (uint32 *)wa_test2,
                    sizeof wa_test2,
                    TASKS_BASE_PRIORITY - 2,
                    0);
test_assert(err == OS_SUCCESS, "task 2 creation failed");

err = OS_TaskCreate(&tid3,
                    "running thread 3",
                    test_thread3,
                    (uint32 *)wa_test3,
                    sizeof wa_test3,
                    TASKS_BASE_PRIORITY - 1,
                    0);
test_assert(err == OS_SUCCESS, "task 3 creation failed");

err = OS_TaskCreate(&tid4,
                    "running thread 4",
                    test_thread4,
                    (uint32 *)wa_test4,
                    sizeof wa_test4,
                    TASKS_BASE_PRIORITY - 0,
                    0);
test_assert(err == OS_SUCCESS, "task 4 creation failed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Tasks are made runnable atomically and their execution order tested.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[OS_TaskDelay(5);
test_assert_sequence("ABCD", "task order violation");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Four tasks are created in an not ordered way.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;
uint32 tid1, tid2, tid3, tid4;

err = OS_TaskCreate(&tid2,
                    "running thread 2",
                    test_thread2,
                    (uint32 *)wa_test2,
                    sizeof wa_test2,
                    TASKS_BASE_PRIORITY - 2,
                    0);
test_assert(err == OS_SUCCESS, "task 2 creation failed");

err = OS_TaskCreate(&tid1,
                    "running thread 1",
                    test_thread1,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY - 3,
                    0);
test_assert(err == OS_SUCCESS, "task 1 creation failed");

err = OS_TaskCreate(&tid4,
                    "running thread 4",
                    test_thread4,
                    (uint32 *)wa_test4,
                    sizeof wa_test4,
                    TASKS_BASE_PRIORITY - 0,
                    0);
test_assert(err == OS_SUCCESS, "task 4 creation failed");

err = OS_TaskCreate(&tid3,
                    "running thread 3",
                    test_thread3,
                    (uint32 *)wa_test3,
                    sizeof wa_test3,
                    TASKS_BASE_PRIORITY - 1,
                    0);
test_assert(err == OS_SUCCESS, "task 3 creation failed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Tasks are made runnable atomically and their execution order tested.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[OS_TaskDelay(5);
test_assert_sequence("ABCD", "task order violation");]]></value>
                    </code>
                  </step>
                </steps>
              </case>
              <case>
                <brief>
                  <value>OS_TaskDelete() errors</value>
                </brief>
                <description>
                  <value>Parameters checking in OS_TaskDelete() is tested.</value>
                </description>
                <condition>
                  <value />
                </condition>
                <various_code>
                  <setup_code>
                    <value />
                  </setup_code>
                  <teardown_code>
                    <value />
                  </teardown_code>
                  <local_variables>
                    <value />
                  </local_variables>
                </various_code>
                <steps>
                  <step>
                    <description>
                      <value>OS_TaskDelete() is invoked with task_id set to -1, an error is expected.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;

err = OS_TaskDelete((uint32)-1);
test_assert(err == OS_ERR_INVALID_ID, "wrong task id not detected");]]></value>
                    </code>
                  </step>
                </steps>
              </case>
              <case>
                <brief>
                  <value>OS_TaskDelete() and OS_TaskInstallDeleteHandler() functionality</value>
                </brief>
                <description>
                  <value>OS_TaskDelete() and OS_TaskInstallDeleteHandler() are tested for functionality.</value>
                </description>
                <condition>
                  <value />
                </condition>
                <various_code>
                  <setup_code>
                    <value />
                  </setup_code>
                  <teardown_code>
                    <value />
                  </teardown_code>
                  <local_variables>
                    <value><![CDATA[uint32 tid;]]></value>
                  </local_variables>
                </various_code>
                <steps>
                  <step>
                    <description>
                      <value>Creating a task executing an infinite loop.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;

err = OS_TaskCreate(&tid,
                    "deletable thread",
                    test_thread_delete,
                    (uint32 *)wa_test1,
                    sizeof wa_test1,
                    TASKS_BASE_PRIORITY,
                    0);
test_assert(err == OS_SUCCESS, "deletable task creation failed");]]></value>
                    </code>
                  </step>
                  <step>
                    <description>
                      <value>Letting the task run for a while then deleting it. A check is performed on the correct execution of the delete handler.</value>
                    </description>
                    <tags>
                      <value />
                    </tags>
                    <code>
                      <value><![CDATA[int32 err;

(void) OS_TaskDelay(50);
err = OS_TaskDelete(tid);
test_assert(err == OS_SUCCESS, "delete failed");
test_assert_sequence("ABC", "events order violation");]]></value>
                    </code>
                  </step>
                </steps>
              </case>
            </cases>
          </sequence>
        </sequences>
      </instance>
    </instances>
    <exportedFeatures />
  </application>
</SPC5-Config>
